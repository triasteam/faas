{
	"compiler": {
		"version": "0.8.6+commit.11564f7e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					}
				],
				"name": "NewManager",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "label",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "NewOwner",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "SetController",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "controllers",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getSelector",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "manager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "recordExists",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_manager",
						"type": "address"
					}
				],
				"name": "setManager",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "setOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_manager",
						"type": "address"
					}
				],
				"name": "setRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "label",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "setSubnodeOwner",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "label",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_resolver",
						"type": "address"
					}
				],
				"name": "setSubnodeRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"isApprovedForAll(address,address)": {
					"details": "Query if an address is an authorized operator for another address.",
					"params": {
						"_owner": "The address that owns the records.",
						"operator": "The address that acts on behalf of the owner."
					},
					"returns": {
						"_0": "True if `operator` is an approved operator for `owner`, false otherwise."
					}
				},
				"manager(bytes32)": {
					"details": "Returns the address of the manager for the specified node.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "address of the manager."
					}
				},
				"owner(bytes32)": {
					"details": "Returns the address that owns the specified node.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "address of the owner."
					}
				},
				"recordExists(bytes32)": {
					"details": "Returns whether a record has been imported to the registry.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "Bool if record exists"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.",
					"params": {
						"approved": "True if the operator is approved, false to revoke approval.",
						"operator": "Address to add to the set of authorized operators."
					}
				},
				"setManager(bytes32,address)": {
					"details": "Sets the manager address for the specified node.",
					"params": {
						"_manager": "The address of the manager.",
						"node": "The node to update."
					}
				},
				"setOwner(bytes32,address)": {
					"details": "Transfers ownership of a node to a new address. May only be called by the current owner of the node.",
					"params": {
						"_owner": "The address of the new owner.",
						"node": "The node to transfer ownership of."
					}
				},
				"setRecord(bytes32,address,address)": {
					"details": "Sets the record for a node.",
					"params": {
						"_manager": "The address of the manager contract.",
						"_owner": "The address of the new owner.",
						"node": "The node to update."
					}
				},
				"setSubnodeOwner(bytes32,bytes32,address)": {
					"details": "Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.",
					"params": {
						"_owner": "The address of the new owner.",
						"label": "The hash of the label specifying the subnode.",
						"node": "The parent node."
					}
				},
				"setSubnodeRecord(bytes32,bytes32,address,address)": {
					"details": "Sets the record for a subnode.",
					"params": {
						"_owner": "The address of the new owner.",
						"_resolver": "The address of the manager.",
						"label": "The hash of the label specifying the subnode.",
						"node": "The parent node."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"init()": {
					"notice": "Constructs a new ENS registry."
				}
			},
			"notice": "The Function registry contract.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"dev/functions/FunctionRegistry.sol": "FunctionRegistry"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
				"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"dev/functions/FunctionRegistry.sol": {
			"keccak256": "0x9393cde8f47bf3ca5ce25a6703acfe235570ee2050541bf5f2c76d71c5c91fe6",
			"license": "MIT",
			"urls": [
				"bzz-raw://cab59b9ae0dcd965cd3465556974368808b3a07b564d9a03280a01efe304357c",
				"dweb:/ipfs/QmaLa3RVeYVwcWP3bqGqQG7AZhNUdaKAvytVHqS89eexrt"
			]
		},
		"dev/functions/baseManager.sol": {
			"keccak256": "0xffa40a8c682ef041c4bb01212623deb2db8c0354575b9127558b1ac3d82cc027",
			"license": "MIT",
			"urls": [
				"bzz-raw://963ea9aea859e3fe82f5c47fb77048b0c88ac64185b85420fdec6fdb75c91185",
				"dweb:/ipfs/QmPQDUYtWSFmFR8ykrKdgENAeQnzuRyuEkWBESQCZhb8we"
			]
		},
		"dev/functions/registry.sol": {
			"keccak256": "0x36feeac85c09923c68791802ca070c92949291bf04ba2d205227d56d011b7ff6",
			"license": "MIT",
			"urls": [
				"bzz-raw://c81e838e6273141a5fd534d891c1643fcb18d4f47b4bc098fe03b116f6dee49a",
				"dweb:/ipfs/QmQe1DhNYxAZSc6Z527D3v82WV7ny516DeQHrdnZNUmWYr"
			]
		},
		"dev/functions/selector.sol": {
			"keccak256": "0x4b34bfe32f30fb885dfe0da428918089a25a7181c3a0510b7e044819ddc23d4e",
			"license": "MIT",
			"urls": [
				"bzz-raw://04aab22fe275920375551339d75ea6f7fcdea670f8de0b14bebdba09c955a3ab",
				"dweb:/ipfs/QmRSbedakJ2qrosnh955n8xFAgMcN1PK3WyC28eDgdfix4"
			]
		}
	},
	"version": 1
}