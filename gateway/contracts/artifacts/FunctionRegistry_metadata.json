{
	"compiler": {
		"version": "0.8.21+commit.d9974bed"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract Selector",
						"name": "_selector",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "manager",
						"type": "address"
					}
				],
				"name": "NewManager",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "label",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "NewOwner",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "manager",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "recordExists",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_resolver",
						"type": "address"
					}
				],
				"name": "setManager",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "setOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_resolver",
						"type": "address"
					}
				],
				"name": "setRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "label",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "setSubnodeOwner",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "label",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_resolver",
						"type": "address"
					}
				],
				"name": "setSubnodeRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Constructs a new ENS registry."
				},
				"isApprovedForAll(address,address)": {
					"details": "Query if an address is an authorized operator for another address.",
					"params": {
						"_owner": "The address that owns the records.",
						"operator": "The address that acts on behalf of the owner."
					},
					"returns": {
						"_0": "True if `operator` is an approved operator for `owner`, false otherwise."
					}
				},
				"manager(bytes32)": {
					"details": "Returns the address of the manager for the specified node.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "address of the manager."
					}
				},
				"owner(bytes32)": {
					"details": "Returns the address that owns the specified node.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "address of the owner."
					}
				},
				"recordExists(bytes32)": {
					"details": "Returns whether a record has been imported to the registry.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "Bool if record exists"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.",
					"params": {
						"approved": "True if the operator is approved, false to revoke approval.",
						"operator": "Address to add to the set of authorized operators."
					}
				},
				"setManager(bytes32,address)": {
					"details": "Sets the manager address for the specified node.",
					"params": {
						"_resolver": "The address of the manager.",
						"node": "The node to update."
					}
				},
				"setOwner(bytes32,address)": {
					"details": "Transfers ownership of a node to a new address. May only be called by the current owner of the node.",
					"params": {
						"_owner": "The address of the new owner.",
						"node": "The node to transfer ownership of."
					}
				},
				"setRecord(bytes32,address,address)": {
					"details": "Sets the record for a node.",
					"params": {
						"_owner": "The address of the new owner.",
						"_resolver": "The address of the manager.",
						"node": "The node to update."
					}
				},
				"setSubnodeOwner(bytes32,bytes32,address)": {
					"details": "Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.",
					"params": {
						"_owner": "The address of the new owner.",
						"label": "The hash of the label specifying the subnode.",
						"node": "The parent node."
					}
				},
				"setSubnodeRecord(bytes32,bytes32,address,address)": {
					"details": "Sets the record for a subnode.",
					"params": {
						"_owner": "The address of the new owner.",
						"_resolver": "The address of the manager.",
						"label": "The hash of the label specifying the subnode.",
						"node": "The parent node."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "The Function registry contract.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"FunctionRegistry.sol": "FunctionRegistry"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"FunctionRegistry.sol": {
			"keccak256": "0xdb597e355b986b9bcd6649b102f9de26bd885f5f4bbec23405c08ddd50a073f9",
			"license": "MIT",
			"urls": [
				"bzz-raw://63e17c6df60f5a97e34adde6da6954daf29998c81f483d42250f764cc57a637e",
				"dweb:/ipfs/QmXsvo8QbH2UtaDPySv7RR2Wy1quSiAhrnjP3UMnPauxPz"
			]
		},
		"registry.sol": {
			"keccak256": "0x0aebdbbf0b7b4f0a9ec96c9278d223ae541482fc28cd116baf90942c3a0fc6bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://1bdf7737085beae214c95de6b16f763b3f1734bbca7dc088dd65a3a11e6ce4af",
				"dweb:/ipfs/QmQQeqCKNbJ5wprnCjAYEDkwxRZQm1wNeL4DyFQKLr7R2P"
			]
		},
		"selector.sol": {
			"keccak256": "0xbdb8d6f76637cb411701e40e4d289e9f00ca6ec42f13c4f60cac42d8ff004784",
			"license": "MIT",
			"urls": [
				"bzz-raw://fa656d564307e4858a416899e2f6269cd07b603ab278f696342895a32d3d1a65",
				"dweb:/ipfs/QmZ2aEZMdd4Q5z6B8rkA8NDJ3aU1ZGBVep5Up5AcW15MAj"
			]
		}
	},
	"version": 1
}